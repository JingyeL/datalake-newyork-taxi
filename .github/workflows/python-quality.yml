name: Python Code Quality

on:
  push:
    paths:
      - "src/**"
      - "tests/**"
      - "*.py"
      - "requirements*.txt"
  pull_request:
    paths:
      - "src/**"
      - "tests/**"
      - "*.py"
      - "requirements*.txt"

env:
  PYTHON_VERSION: "3.12"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 pylint mypy bandit safety isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Import sorting (isort)
        run: |
          isort --check-only --diff src/ tests/

      - name: Code formatting (Black)
        run: |
          black --check --diff src/ tests/

      - name: Linting (flake8)
        run: |
          flake8 src/ tests/ --statistics --tee --output-file=flake8-report.txt

      - name: Advanced linting (pylint)
        run: |
          pylint src/ --output-format=text --reports=yes --score=yes > pylint-report.txt

      - name: Type checking (mypy)
        run: |
          mypy src/ --ignore-missing-imports --html-report mypy-html

      - name: Security analysis (bandit)
        run: |
          bandit -r src/ -f json -o bandit-report.json

      - name: Dependency vulnerability check (safety)
        run: |
          safety check --json --output safety-report.json

      - name: Upload quality reports
        uses: actions/upload-artifact@v4.4.1
        if: always()
        with:
          name: code-quality-reports
          path: |
            flake8-report.txt
            pylint-report.txt
            bandit-report.json
            safety-report.json
            mypy-html/

  testing:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist pytest-mock
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run tests with coverage
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --junitxml=pytest-results.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-python-${{ matrix.python-version }}

      - name: Upload test results
        uses: actions/upload-artifact@v4.4.1
        if: always()
        with:
          name: test-results-python-${{ matrix.python-version }}
          path: |
            htmlcov/
            pytest-results.xml
            .coverage
